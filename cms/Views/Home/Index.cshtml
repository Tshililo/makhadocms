@model System.Collections.IEnumerable


<script>

    function OnApplicationHeaderGridFocusedRowChanged(s, e) {
        s.GetRowValues(s.GetFocusedRowIndex(), 'ObjId', OnGetRowValues);
    }
    function OnGetRowValues(values) {
        ApplicationGridViewPartial_ObjiId = values;
        GVDualApplication.PerformCallback();
        GVGraveOwner.PerformCallback();
  
    }

    function InitialSetFocus(s, e) {
        if (s.GetFocusedRowIndex() < 0)
            s.SetFocusedRowIndex(0);
    }


    function OnBeginCallback(s, e) {

        e.customArgs["headerObjId"] = ApplicationGridViewPartial.GetRowKey(ApplicationGridViewPartial.GetFocusedRowIndex());

        var header = ApplicationGridViewPartial.GetRowKey(ApplicationGridViewPartial.GetFocusedRowIndex());
      //  alert(header);
     //   e.customArgs["HeaderId"] = ApplicationGridViewPartial_ObjiId; gvContainerBookingHeader.GetRowKey(gvContainerBookingHeader.GetFocusedRowIndex());
    }


    function OnLinkToGraveMenuClick(s, e) {

        if (e.item.name == "btnHeaderLink") {

            // get ID of apllication table
            var ApplicantObjId = ApplicationGridViewPartial.GetRowKey(ApplicationGridViewPartial.GetFocusedRowIndex());

            //get id of grave  table
            var GraveId = GravesGridViewPartial.GetRowKey(GravesGridViewPartial.GetFocusedRowIndex());
            $.ajax({
                url: '@Url.Action("LinkToGraveAdd", "Home")',
                type: "POST",
                //dataType: "json", // if we speficy this we must return json from the controller method. this way we dont need to return anything
                dataType: "text",
                traditional: true,
                async: false,
                data: { ApplicantObjId: ApplicantObjId, GraveId: GraveId },
                success: function (data) {
                    GVGraveOwner.PerformCallback();
                    LinkToGravePopUp.Hide();

                },
                error: function (xhr, textStatus, errorThrown) {
                    alert('Request Status: ' + xhr.status + '; Status Text: ' + textStatus + '; Error: ' + errorThrown);

                }
            });
        }
    }

    function InitialSetFocus(s, e) {
        if (s.GetFocusedRowIndex() < 0)
            s.SetFocusedRowIndex(0);
    }

    function SaveApplication() {

    	var Idno = IdNo.GetValue();
    	var Deedname = DeedName.GetValue();
    	var Deedgender = DeedGender.GetValue();
    	var Agegroup = AgeGroup.GetValue();
    	var Religionid = ReligionId.GetValue();
    	
    	if (Idno == null || Idno == "") {
    		alert("Please Enter ID No.");
    		return;
    	}

    	if (Deedname == null || Deedname == "") {
    		alert("Please Enter Deed Name.");
    		return;
    	}

    	if (Deedgender == null || Deedgender == "") {
    		alert("Please Select Deed Gender");
    		return;
    	}

    	if (Agegroup == null || Agegroup == "") {
    		alert("Please Select Age group");
    		return;
    	}

    	if (Religionid == null || Religionid == "") {
    		alert("Please Select Religion");
    		return;
    	}

        ApplicationGridViewPartial.UpdateEdit()
    }

    function PrintReport() {
        //Get Header
        var ObjId = ApplicationGridViewPartial.GetRowKey(ApplicationGridViewPartial.GetFocusedRowIndex());
        //Get values
        var attention = Attention.GetValue();
        var datefrom = DateFrom.GetValue();
        var dateto = DateTo.GetValue();

        var myDate = new Date(datefrom);
        var from = myDate.toLocaleString()

        var myDate1 = new Date(dateto);
        var to = myDate1.toLocaleString()

        var passed_params = ObjId + "," + attention + "," + from + "," + to;

        if (attention == null) {
            alert('Please Enter Attention to!');
            return;
        }

        if (datefrom == null)
        {
            alert('Please enter Date From');
            return;
        }
        if (dateto == null) {
            alert('Please enter Date To');
            return;
        }


     //   alert(passed_params);

        var link = '@Url.Action("ReportViewPartial", "Home", new { reportParams = "_reportParams_" })';

        link.replace("_reportParams_", passed_params);
        window.open(link.replace("_reportParams_", passed_params), '_blank');

    }

	function DualSaveApplication() {

		var Idno = IdNo.GetValue();
		var Deedname = DeedName.GetValue();
		var Deedgender = DeedGender.GetValue();
		var Agegroup = AgeGroup.GetValue();
		var Religionid = ReligionId.GetValue();

		if (Idno == null || Idno == "") {
			alert("Please Enter ID No.");
			return;
		}

		if (Deedname == null || Deedname == "") {
			alert("Please Enter Deed Name.");
			return;
		}

		if (Deedgender == null || Deedgender == "") {
			alert("Please Select Deed Gender");
			return;
		}

		if (Agegroup == null || Agegroup == "") {
			alert("Please Select Age group");
			return;
		}

		if (Religionid == null || Religionid == "") {
			alert("Please Select Religion");
			return;
		}

        GVDualApplication.UpdateEdit()
    }

    function OnDualApplicationMenuClick(s, e) {

        if (e.item.name == "btnHeaderNew") {

            var index = GVDualApplication.GetFocusedRowIndex();
            GVDualApplication.AddNewRow(index);
        }

        if (e.item.name == "btnHeaderEdit") {

            var index = GVDualApplication.GetFocusedRowIndex();
            // alert('index : ' + index);

            GVDualApplication.StartEditRow(index);
            // call edit funtion from custom button
        }

        if (e.item.name == "btnHeaderDelete") {
            if (confirm("Confirm Delete?")) {
                var index = GVDualApplication.GetFocusedRowIndex();
                GVDualApplication.DeleteRow(index);
                GVDualApplication.PerformCallback();
            }
        }
    }
    function OnGraveOwnerMenuClick(s, e) {

        if (e.item.name == "btnHeaderDelete") {
            if (confirm("Confirm Delete?")) {
                var index = GVGraveOwner.GetFocusedRowIndex();
                GVGraveOwner.DeleteRow(index);
            }
        }
    }
    function OnApplicationMenuClick(s, e) {

        if (e.item.name == "btnHeaderNew") {

            var index = ApplicationGridViewPartial.GetFocusedRowIndex();
            ApplicationGridViewPartial.AddNewRow(index);
        }

      if (e.item.name == "btnPrintReport") {

          ReportOptions.Show();
      }



        if (e.item.name == "btnHeaderImport") {
            ImportCSV.Show();
        }

        if (e.item.name == "btnHeaderExport") {

            // get ID of apllication table
            var ApplicantObjId = ApplicationGridViewPartial.GetRowKey(ApplicationGridViewPartial.GetFocusedRowIndex());

            $.ajax({
                url: '@Url.Action("ExportCSV", "Home")',
                type: "POST",
                dataType: "text",
                traditional: true,
                async: false,
                data: { ApplicantObjId: ApplicantObjId},
                success: function (data) {

                },
                error: function (xhr, textStatus, errorThrown) {
                    alert('Request Status: ' + xhr.status + '; Status Text: ' + textStatus + '; Error: ' + errorThrown);

                }
            });

        }

        if (e.item.name == "btnHeaderDualRecordPopUp") {

            DualRecordPopUp.Show();
        }

        if (e.item.name == "btnHeaderEdit") {

            var index = ApplicationGridViewPartial.GetFocusedRowIndex();
            // alert('index : ' + index);

            ApplicationGridViewPartial.StartEditRow(index);
            // call edit funtion from custom button
        }

        if (e.item.name == "btnLinkToGrave") {

            LinkToGravePopUp.Show();

        }

        if (e.item.name == "btnLinkToDropBox") {
            LinkToDropBox.Show();   
        }

        if (e.item.name == "btnHeaderDelete") {
                  if (confirm("Confirm Delete?")) {
                      var index = ApplicationGridViewPartial.GetFocusedRowIndex();
                      ApplicationGridViewPartial.DeleteRow(index);
                      GVGraveOwner.PerformCallback();
                      GVDualApplication.PerformCallback();
                  }
              }
    }

    function HighlightEllipsis() {
        $('.dxgv.dx-ellipsis').each(function (i, elem) {
            var color = elem.offsetWidth < elem.scrollWidth ? '#FFF2C0' : 'white';
            elem.style.transition = 'background 1s';
            elem.style['background-color'] = color;
        });
    }

    //for exports on grids
    function OnToolbarItemClick(s, e) {
    }
    function IsExportToolbarCommand(command) {
        return command == "Pdf" || command == "Xlsx" || command == "Xls";
    }
</script>


@using (Html.BeginForm())
{

@Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "ApplicationFeaturesFormLayout";
    settings.AlignItemCaptionsInAllGroups = true;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    var groupMain = settings.Items.AddGroupItem(groupSettings =>
    {
        groupSettings.Caption = string.Format("Burial Records");
        groupSettings.ShowCaption = DefaultBoolean.True;
        groupSettings.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
        groupSettings.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
        groupSettings.ColCount = 1;
    });
    groupMain.Items.Add(itemSettings =>
    {
        itemSettings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        itemSettings.ShowCaption = DefaultBoolean.False;
        itemSettings.ColSpan = 1;
        itemSettings.SetNestedContent(() =>
        {
            @Html.RenderAction("ApplicationsGridViewPartial");
        });
    });
    groupMain.Items.Add(itemSettings =>
    {
        itemSettings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        itemSettings.ShowCaption = DefaultBoolean.False;
        itemSettings.ColSpan = 1;
        itemSettings.SetNestedContent(() =>
        {
            //return form
            @Html.RenderPartial("ApplicationMenu");
        });
    });

    var groupMain3 = settings.Items.AddGroupItem(groupSettings =>
    {
        groupSettings.Caption = string.Format("Burial Grave Plot");
        groupSettings.ShowCaption = DefaultBoolean.True;
        groupSettings.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
        groupSettings.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
        groupSettings.ColCount = 1;
    });


    groupMain3.Items.Add(itemSettings =>
    {
        itemSettings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        itemSettings.ShowCaption = DefaultBoolean.False;
        itemSettings.ColSpan = 1;
        itemSettings.SetNestedContent(() =>
        {
            @Html.RenderAction("GraveOwnerPartial");
        });
    });
    groupMain3.Items.Add(itemSettings =>
    {
        itemSettings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        itemSettings.ShowCaption = DefaultBoolean.False;
        itemSettings.ColSpan = 1;
        itemSettings.SetNestedContent(() =>
        {
            //return form
            @Html.RenderPartial("GraveOwnerMenu");
        });
    });

}).GetHtml()

    @Html.DevExpress().PopupControl(settings =>
{
    settings.Name = "DualRecordPopUp";
    settings.CloseAction = CloseAction.CloseButton;
    settings.ShowOnPageLoad = false;
    settings.Width = Unit.Pixel(600);
    settings.Height = Unit.Pixel(400);
    settings.ShowCloseButton = true;
    settings.ShowHeader = true;
    settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
    settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
    settings.AllowDragging = true;
    settings.DragElement = DragElement.Header;
    settings.AllowResize = true;
    settings.Modal = true;
    settings.ResizingMode = ResizingMode.Live;
    settings.ShowSizeGrip = ShowSizeGrip.True;
    settings.CloseAction = CloseAction.CloseButton;
    settings.PopupAction = PopupAction.LeftMouseClick;
    settings.HeaderText = "Dual Record";
    settings.ShowCloseButton = true;

    settings.SetContent(() =>
    {
        @Html.RenderAction("DualApplicationLanding");

    });

}).GetHtml()

    @Html.DevExpress().PopupControl(settings =>
{
    settings.Name = "LinkToGravePopUp";
    settings.CloseAction = CloseAction.CloseButton;
    settings.ShowOnPageLoad = false;
    settings.Width = Unit.Pixel(600);
    settings.Height = Unit.Pixel(400);
    settings.ShowCloseButton = true;
    settings.ShowHeader = true;
    settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
    settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
    settings.AllowDragging = true;
    settings.DragElement = DragElement.Header;
    settings.AllowResize = true;
    settings.Modal = true;
    settings.ResizingMode = ResizingMode.Live;
    settings.ShowSizeGrip = ShowSizeGrip.True;
    settings.CloseAction = CloseAction.CloseButton;
    settings.PopupAction = PopupAction.LeftMouseClick;
    settings.HeaderText = "Graves";
    settings.ShowCloseButton = true;

    settings.SetContent(() =>
    {
        @Html.RenderAction("LinkToGraveLanding");

    });

}).GetHtml()

    @Html.DevExpress().PopupControl(settings =>
{
    settings.Name = "ImportCSV";
    settings.CloseAction = CloseAction.CloseButton;
    settings.ShowOnPageLoad = false;
    settings.Width = Unit.Pixel(600);
    settings.Height = Unit.Pixel(200);
    settings.ShowCloseButton = true;
    settings.ShowHeader = true;
    settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
    settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
    settings.AllowDragging = true;
    settings.DragElement = DragElement.Header;
    settings.AllowResize = true;
    settings.Modal = true;
    settings.ResizingMode = ResizingMode.Live;
    settings.ShowSizeGrip = ShowSizeGrip.True;
    settings.CloseAction = CloseAction.CloseButton;
    settings.PopupAction = PopupAction.LeftMouseClick;
    settings.HeaderText = "Import CSV";
    settings.ShowCloseButton = true;

    settings.SetContent(() =>
    {
        @Html.RenderAction("ImportApplication");

    });

}).GetHtml()

    @Html.DevExpress().PopupControl(settings =>
{
    settings.Name = "ReportOptions";
    settings.CloseAction = CloseAction.CloseButton;
    settings.Width = Unit.Pixel(200);
    settings.Height = Unit.Pixel(250);
    settings.ShowCloseButton = true;
    settings.ShowHeader = true;
    settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
    settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
    settings.AllowDragging = true;
    settings.DragElement = DragElement.Header;
    settings.AllowResize = true;
    settings.Modal = true;
    settings.ResizingMode = ResizingMode.Live;
    settings.ShowSizeGrip = ShowSizeGrip.True;
    settings.CloseAction = CloseAction.CloseButton;
    settings.PopupAction = PopupAction.LeftMouseClick;
    settings.HeaderText = "Report Options";
    settings.ShowCloseButton = true;

    settings.SetContent(() =>
    {

        @Html.RenderPartial("ReportOptions");

    });

}).GetHtml()

    @Html.DevExpress().PopupControl(settings =>
{
	settings.Name = "LinkToDropBox";
	settings.CloseAction = CloseAction.CloseButton;
	settings.CallbackRouteValues = new { Controller = "Home", Action = "FileManagerPartial" };
	settings.LoadContentViaCallback = LoadContentViaCallback.OnPageLoad;
	settings.Width = Unit.Pixel(900);
	settings.Height = Unit.Pixel(250);
	settings.ShowCloseButton = true;
	settings.ShowHeader = true;
	settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
	settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
	settings.AllowDragging = true;
	settings.DragElement = DragElement.Header;
	settings.AllowResize = true;
	settings.Modal = true;
	settings.ResizingMode = ResizingMode.Live;
	settings.ShowSizeGrip = ShowSizeGrip.True;
	settings.CloseAction = CloseAction.CloseButton;
	settings.PopupAction = PopupAction.LeftMouseClick;
	settings.HeaderText = "DropBox";
	settings.ShowCloseButton = true;

	settings.SetContent(() =>
	{
	//	@Html.RenderAction("FileManagerPartial");
	});

}).GetHtml()

}




